import express from "express";
import cors from "cors";
import fetch from "node-fetch";

const app = express();

// ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ CORS-–∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è Netlify-–¥–æ–º–µ–Ω—É
const corsOptions = {
  origin: "https://sifttime-widget.netlify.app",
  methods: "GET,POST",
  allowedHeaders: ["Content-Type"]
};

app.use(cors(corsOptions));
app.use(express.json());

// üîó URL –¥–æ Google Apps Script
const GAS_URL = "https://script.google.com/macros/s/AKfycby8ai7RA8_n59aY7ZC3Ni-Vm9YQyCJKNmg0YelpYu0oUjAkeX1o_AtJABjZCdyDu2xj/exec";

// üì§ –û–±—Ä–æ–±–∫–∞ –ø–æ–≤–Ω–æ—ó —Ñ–æ—Ä–º–∏
app.post("/send", async (req, res) => {
  try {
    const response = await fetch(GAS_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(req.body)
    });

    const text = await response.text();
    console.log("üì¶ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GAS:", text);
    res.json(JSON.parse(text));
  } catch (err) {
    console.error("‚ùå –ü–û–ú–ò–õ–ö–ê –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ:", err.message);
    res.status(500).json({ success: false, error: err.message });
  }
});

// üü° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç ‚Äî –ª–∏—à–µ –¥–ª—è —á–∏—Å–ª–∞
app.post("/writeNumber", async (req, res) => {
  try {
    const payload = {
      surname: "",
      name: "",
      patronymic: "",
      number: req.body.value || 0
    };

    const response = await fetch(GAS_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload)
    });

    const text = await response.text();
    console.log("üì¶ –í—ñ–¥–ø–æ–≤—ñ–¥—å (writeNumber):", text);
    res.json(JSON.parse(text));
  } catch (err) {
    console.error("‚ùå –ü–û–ú–ò–õ–ö–ê /writeNumber:", err.message);
    res.status(500).json({ success: false, error: err.message });
  }
});

// ‚úÖ GET-–∑–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∑ —Ç–∞–±–ª–∏—Ü—ñ
// ‚úÖ GET-–∑–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ GAS
app.get("/data", async (req, res) => {
  try {
    const response = await fetch(GAS_URL);
    const text = await response.text(); // —Å–ø–æ—á–∞—Ç–∫—É —è–∫ —Ç–µ–∫—Å—Ç
    console.log("üì¶ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GAS (/data):", text);

    try {
      const json = JSON.parse(text); // –ø—Ä–æ–±—É—î–º–æ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏
      res.json(json);
    } catch (parseError) {
      console.error("‚ùå JSON parse error (/data):", parseError.message);
      res.status(500).json({ success: false, error: "Invalid JSON from GAS" });
    }

  } catch (err) {
    console.error("‚ùå –ü–û–ú–ò–õ–ö–ê GET /data:", err.message);
    res.status(500).json({ success: false, error: err.message });
  }
});

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// ‚úÖ –û–±—Ä–æ–±–∫–∞ GET-–∑–∞–ø–∏—Ç—É –Ω–∞ /last-id ‚Äî –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π ID –∑ —Ç–∞–±–ª–∏—Ü—ñ
app.get("/last-id", async (req, res) => {
  try {
    const response = await fetch(GAS_URL); // doGet Apps Script
    const text = await response.text();

    try {
      const data = JSON.parse(text);
      if ("lastId" in data) {
        res.json({ lastId: data.lastId });
      } else {
        throw new Error("–ü–æ–ª–µ lastId –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ");
      }
    } catch (parseError) {
      console.error("‚ùå JSON parse error (/last-id):", parseError.message);
      res.status(500).json({ success: false, error: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π JSON –≤—ñ–¥ GAS" });
    }
  } catch (err) {
    console.error("‚ùå –ü–û–ú–ò–õ–ö–ê GET /last-id:", err.message);
    res.status(500).json({ success: false, error: err.message });
  }
});


//************************************************************************************** */
// ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–π—Å—É —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ–π (–ø—Ä–æ–∫—Å—ñ –¥–ª—è category.js)
app.get("/getPrice", async (req, res) => {
  try {
    const response = await fetch(GAS_URL);
    const text = await response.text();

    try {
      const data = JSON.parse(text);
      res.json(data);
    } catch (parseError) {
      console.error("‚ùå JSON parse error (/getPrice):", parseError.message);
      res.status(500).json({ success: false, error: "–ù–µ–≤—ñ—Ä–Ω–∏–π JSON —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ GAS" });
    }

  } catch (err) {
    console.error("‚ùå –ü–û–ú–ò–õ–ö–ê GET /getPrice:", err.message);
    res.status(500).json({ success: false, error: err.message });
  }
});

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`‚úÖ Proxy-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
